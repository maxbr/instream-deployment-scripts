application:
  interfaces:
    marathon-manager:
      Mesos_Manager: "bind(marathon#marathon-manager.Mesos_Manager)"
      Marathon_URL:  "bind(marathon#marathon-manager.Marathon_URL)"
      scripts_url:   "bind(marathon#marathon-manager.scripts_url)"

    actions:
      list-applications:   "bind(marathon#actions.list-applications)"
      application-details: "bind(marathon#actions.application-details)"
      create-application:  "bind(marathon#actions.create-application)"
      update-application:  "bind(marathon#actions.update-application)"
      destroy-application: "bind(marathon#actions.destroy-application)"
      restart-application: "bind(marathon#actions.restart-application)"

  components:
    metadata:
      type: cobalt.common.Constants
      interfaces:
        output:
          application-pic:
            type: publish-signal(map<string, object>)
            name: ""
      configuration:
        configuration.values:
          output.application-pic:
            large: "https://goo.gl/TCVF6C"
            small: "https://goo.gl/9WMl0H"
            small-height: 64
    marathon:
      type: workflow.Instance
      interfaces:
        actions:
          list-applications:
            type: receive-command()
            name: List running applications
          application-details:
            type: receive-command(string application-id)
            name: Get running application details
          create-application:
            type: receive-command(string application-id, string serialized-descriptor)
            name: Create/run new application
          update-application:
            type: receive-command(string application-id, string serialized-descriptor)
            name: Update running application
          destroy-application:
            type: receive-command(string application-id)
            name: Delete application
          restart-application:
            type: receive-command(string application-id)
            name: Restart running application

        marathon-manager:
          Mesos_Manager: consume-signal(string)
          Marathon_URL: consume-signal(string)
          scripts_url: consume-signal(string)

      required: [marathon-manager]
      configuration:
        configuration.triggers: {}
        configuration.workflows:
          launch:
            steps:
              - get-env-props:
                  action: getEnvironmentProperties
                  output:
                    config: result
              - get-signals:
                  action: getSignals
                  output:
                      signals: result
              - provision-vm:
                  action: provisionVms
                  precedingPhases: [ get-signals ]
                  parameters:
                    hardwareId: t2.micro
                    # You can define either 'staticIps' or 'ip' but not both.
                    staticIps: ['{$.signals.marathon-manager.Mesos_Manager}']
                    # ip: '{$.static-ip1}'
                    roleName: manager-node
                    vmIdentity: 'ubuntu'
                  output:
                    result-ips: ips
            return:
              - Marathon_URL:
                  description: "Marathon UI URL"
                  value: "{$.signals.marathon-manager.Marathon_URL}"

          list-applications:
            steps:
              - get-env-props:
                  action: getEnvironmentProperties
                  output:
                    props: result
              - list-applications:
                  action: execrun
                  precedingPhases: [ get-env-props ]
                  parameters:
                    isSudo: true
                    roles: [ "manager-node" ]
                    command:
                        - |
                          cd mesos-ansible/marathon-comm
                          echo "test"
                  output:
                    applications-list: stdout
            return:
              - applications-list:
                  description: List of running applications
                  value: "{$.applications-list}"

          application-details:
            steps:
              - get-env-props:
                  action: getEnvironmentProperties
                  output:
                    props: result
              - get-application-details:
                  action: execrun
                  precedingPhases: [ get-env-props ]
                  parameters:
                    isSudo: true
                    roles: [ "manager" ]
                    command:
                        - |
                          cd mesos-ansible/marathon-comm
                          echo "test"
                  output:
                    application-details: stdout
            return:
              - application-details:
                  description: Application info
                  value: "{$.application-details}"

          create-application:
            steps:
              - get-env-props:
                  action: getEnvironmentProperties
                  output:
                    props: result
              - create-application:
                  action: execrun
                  precedingPhases: [ get-env-props ]
                  parameters:
                    isSudo: true
                    roles: [ "manager" ]
                    command:
                        - |
                          cd mesos-ansible/marathon-comm
                          echo "test"
                  output:
                    application-details: stdout
            return:
              - application-details:
                  description: New application info
                  value: "{$.application-details}"

          update-application:
            steps:
              - get-env-props:
                  action: getEnvironmentProperties
                  output:
                    props: result
              - create-application:
                  action: execrun
                  precedingPhases: [ get-env-props ]
                  parameters:
                    isSudo: true
                    roles: [ "manager" ]
                    command:
                        - |
                          cd mesos-ansible/marathon-comm
                          echo "test"
                  output:
                    application-details: stdout
            return:
              - application-details:
                  description: Updated application info
                  value: "{$.application-details}"

          destroy-application:
            steps:
              - get-env-props:
                  action: getEnvironmentProperties
                  output:
                    props: result
              - destroy-application:
                  action: execrun
                  precedingPhases: [ get-env-props ]
                  parameters:
                    isSudo: true
                    roles: [ "manager" ]
                    command:
                        - |
                          cd mesos-ansible/marathon-comm
                          echo "test"

          restart-application:
            steps:
              - get-env-props:
                  action: getEnvironmentProperties
                  output:
                    props: result
              - restart-application:
                  action: execrun
                  precedingPhases: [ get-env-props ]
                  parameters:
                    isSudo: true
                    roles: [ "manager" ]
                    command:
                        - |
                          cd mesos-ansible/marathon-comm
                          echo "test"
