application:
  configuration:
    input.ami: "us-west-1/ami-48db9d28"
    input.region: "us-west-1"
    input.identity: "ubuntu"
    input.manager_hardware: "t2.micro"
    input.master_hardware: "t2.small"
    input.masters_quantity: "1"
    input.slaves_general_hardware_quantity: 1
    input.slaves_cpu_hardware_quantity: 1
    input.slaves_memory_hardware_quantity: 1
    input.slaves_disk_hardware_quantity: 1
    input.general_tag_hardware: "t2.micro"
    input.cpu_tag_hardware: "t2.micro"
    input.memory_tag_hardware: "t2.micro"
    input.disk_tag_hardware: "t2.micro"
    input.playbooks_url: "https://github.com/shinjik/instream-deployment-scripts/archive/master.zip"
    input.mesos_version: "0.28.2"
    input.mesos_package_version: "2.0.27"
    input.marathon_version: "1.1.2"

  interfaces:
    input:
      ami: "bind(vms#input.ami, manager-node#configuration.imageId)"
      region: "bind(vms#input.region, manager-node#configuration.locationId)"
      identity: "bind(vms#input.identity, manager-node#configuration.login)"
      manager_hardware: "bind(vms#input.manager_hardware, manager-node#configuration.hardwareId)"
      master_hardware: "bind(vms#input.master_hardware)"
      masters_quantity: "bind(vms#input.masters_quantity)"
      slaves_general_hardware_quantity: "bind(vms#input.slaves_general_hardware_quantity)"
      slaves_cpu_hardware_quantity: "bind(vms#input.slaves_cpu_hardware_quantity)"
      slaves_memory_hardware_quantity: "bind(vms#input.slaves_memory_hardware_quantity)"
      slaves_disk_hardware_quantity: "bind(vms#input.slaves_disk_hardware_quantity)"
      general_tag_hardware: "bind(vms#input.general_tag_hardware)"
      cpu_tag_hardware: "bind(vms#input.cpu_tag_hardware)"
      memory_tag_hardware: "bind(vms#input.memory_tag_hardware)"
      disk_tag_hardware: "bind(vms#input.disk_tag_hardware)"
      playbooks_url: "bind(vms#input.playbooks_url)"
      mesos_version: "bind(vms#input.mesos_version)"
      mesos_package_version: "bind(vms#input.mesos_package_version)"
      marathon_version: "bind(vms#input.marathon_version)"

    Mesos:
      application-pic: "bind(metadata#output.mesos-pic)"
      manager: "bind(vms#result.Mesos_URL)"
      slaves_with_general_tag: "bind(vms#result.mesos_slaves_with_general_tag)"
      slaves_with_cpu_tag: "bind(vms#result.mesos_slaves_with_cpu_tag)"
      slaves_with_memory_tag: "bind(vms#result.mesos_slaves_with_memory_tag)"
      slaves_with_disk_tag: "bind(vms#result.mesos_slaves_with_disk_tag)"
      scale-cluster: "bind(vms#actions.scale-cluster)"
      update-playbooks: "bind(vms#actions.update-playbooks)"
      run-ansible: "bind(vms#actions.run-ansible)"
      slaves_general_quantity: "bind(vms#result.slaves_general_quantity)"
      slaves_cpu_quantity: "bind(vms#result.slaves_cpu_quantity)"
      slaves_memory_quantity: "bind(vms#result.slaves_memory_quantity)"
      slaves_disk_quantity: "bind(vms#result.slaves_disk_quantity)"

    Marathon:
      application-pic: "bind(metadata#output.marathon-pic)"
      manager: "bind(vms#result.Marathon_URL)"
      list-applications: "bind(marathon#actions.list-applications)"
      application-details: "bind(marathon#actions.application-details)"
      create-application: "bind(marathon#actions.create-application)"
      update-application: "bind(marathon#actions.update-application)"
      destroy-application: "bind(marathon#actions.destroy-application)"
      restart-application: "bind(marathon#actions.restart-application)"

  bindings:
    - [manager-node, vms]
    - [vms, marathon#marathon-manager]

  components:
    metadata:
      type: cobalt.common.Constants
      interfaces:
        output:
          mesos-pic:
            type: publish-signal(map<string, object>)
            name: ""
          marathon-pic:
            type: publish-signal(map<string, object>)
            name: ""
      configuration:
        configuration.values:
          output.mesos-pic:
            large: "https://mesosphere.com/wp-content/themes/mesosphere/library/images/views/why-mesos/mesos-logo.png"
            small: "https://avatars1.githubusercontent.com/u/229272?v=3&s=64"
            small-height: 64
          output.marathon-pic:
            large: "https://camo.githubusercontent.com/074c27eb3865127b2d8bc616ae16450c0f661780/68747470733a2f2f6d65736f7370686572652e636f6d2f77702d636f6e74656e742f7468656d65732f6d65736f7370686572652f6c6962726172792f696d616765732f636f6d706f6e656e74732f73657276696365732f6d61726174686f6e2e6a7067"
            small: "http://mesosphere.github.io/presentations/mesos-nutshell-2015/assets/marathon-favicon-64x64.png"
            small-height: 64

    manager-node:
      type: compute.Instance

    vms:
      type: workflow.Instance
      interfaces:
        manager-node:
          networks:   consume-signal(map<string, map<string, string>>)
          exec:       send-command(string command, int timeout => string stdOut, string stdErr => string stdOut, string stdErr, int exitCode)
          put-file:   send-command(string filename, bytes payload)
          get-file:   send-command(string filename => bytes payload)
        input:
          ami:
            type: configuration(string)
            name: EC2 image
          region:
            type: configuration(string)
            name: EC2 datacenter
          identity:
            type: configuration(string)
            name: EC2 image username
          manager_hardware:
            type: configuration(string)
            name: Mesos cluster manager node hardware type
          master_hardware:
            type: configuration(string)
            name: Mesos master node hardware type
          masters_quantity:
            type: configuration(string)
            name: Quantity of mesos masters
          slaves_general_hardware_quantity:
            type: configuration(int)
            name: Quantity of slaves with general tag
          slaves_cpu_hardware_quantity:
            type: configuration(int)
            name: Quantity of slaves with cpu tag
          slaves_memory_hardware_quantity:
            type: configuration(int)
            name: Quantity of slaves with memory tag
          slaves_disk_hardware_quantity:
            type: configuration(int)
            name: Quantity of slaves with disk tag
          general_tag_hardware:
            type: configuration(string)
            name: Hardware for instances with general tag
          cpu_tag_hardware:
            type: configuration(string)
            name: Hardware for instances with cpu tag
          memory_tag_hardware:
            type: configuration(string)
            name: Hardware for instances with memory tag
          disk_tag_hardware:
            type: configuration(string)
            name: Hardware for instances with disk tag
          playbooks_url:
            type: configuration(string)
            name: Ansible playbooks
          mesos_version:
            type: configuration(string)
            name: Mesos version
          marathon_version:
            type: configuration(string)
            name: Marathon version
          mesos_package_version:
            type: configuration(string)
            name: Mesos .deb package version
        actions:
          scale-cluster:
            type: receive-command(int slaves-general-hardware-quantity, int slaves-cpu-hardware-quantity, int slaves-memory-hardware-quantity, int slaves-disk-hardware-quantity)
            name: Scale cluster
          update-playbooks:
            type: receive-command(string playbooks-url)
            name: Update playbooks on manager node
          run-ansible:
            type: receive-command()
            name: Run ansible
        result:
          Mesos_Manager:
            type: publish-signal(string)
            name: Mesos cluster manager node
          Mesos_Masters:
            type: publish-signal(list<string>)
            name: Mesos master nodes
          Mesos_URL:
            type: publish-signal(string)
            name: Mesos master UI URL
          Marathon_URL:
            type: publish-signal(string)
            name: Marathon UI URL
          mesos_slaves_with_general_tag:
            type: publish-signal(list<string>)
            name: Mesos general slaves
          mesos_slaves_with_cpu_tag:
            type: publish-signal(list<string>)
            name: Mesos cpu intensive slaves
          mesos_slaves_with_memory_tag:
            type: publish-signal(list<string>)
            name: Mesos memory intensive slaves
          mesos_slaves_with_disk_tag:
            type: publish-signal(list<string>)
            name: Mesos disk intensive slaves
          scripts_url:
            type: publish-signal(string)
            name: Marathon management scripts URL
          slaves_general_quantity:
            type: publish-signal(int)
            name: Mesos general slaves quantity
          slaves_cpu_quantity:
            type: publish-signal(int)
            name: Mesos cpu intensive slaves quantity
          slaves_memory_quantity:
            type: publish-signal(int)
            name: Mesos memory intensive slaves quantity
          slaves_disk_quantity:
            type: publish-signal(int)
            name: Mesos disk intensive slaves quantity

      required: [manager-node]
      configuration:
        configuration.triggers: {}
        configuration.workflows:
          launch:
            steps:
              - get-env-props:
                  action: getEnvironmentProperties
                  phase: get-env-props
                  output:
                    config: result

              - get-signals:
                  action: getSignals
                  output:
                      signals: result

              - install-ansible:
                  action: .install-ansible
                  precedingPhases: [ get-env-props ]

              - generate-ansible-ssh-key:
                  action: .generate-ssh-key
                  precedingPhases: [ get-env-props ]

              - provision-mesos-masters:
                  action: .provision-nodes
                  phase: provision-nodes
                  precedingPhases: [ get-env-props ]
                  parameters:
                      roleName: "mesos-master"
                      hardwareId: "{$.master_hardware}"
                      quantity: "{$.masters_quantity}"
                  output:
                      masterIps: ips
                      masterDns: dns

              - provision-mesos-slaves:
                  action: .provision-slave-nodes
                  phase: provision-nodes
                  precedingPhases: [ get-env-props ]
                  parameters:
                      slaves-general-hardware-quantity: "{$.slaves_general_hardware_quantity}"
                      slaves-cpu-hardware-quantity: "{$.slaves_cpu_hardware_quantity}"
                      slaves-memory-hardware-quantity: "{$.slaves_memory_hardware_quantity}"
                      slaves-disk-hardware-quantity: "{$.slaves_disk_hardware_quantity}"
                  output:
                      slaveGeneralIps: slaveGeneralIps
                      slaveCpuIps: slaveCpuIps
                      slaveMemoryIps: slaveMemoryIps
                      slaveDiskIps: slaveDiskIps

              - distribute-ssh-pub-key:
                  action: .distribute-ssh-pub-key
                  precedingPhases: [ provision-nodes ]

              - serialize-masters-list:
                  action: .serialize-list
                  precedingPhases: [ distribute-ssh-pub-key ]
                  parameters:
                      arg: "{$.masterIps}"
                  output:
                      serialized-masters-list: as-csv
                      yaml-serialized-masters-list: as-yaml

              - serialize-slaves-with-general-list:
                  action: .serialize-list
                  phase: serialize-slaves-list
                  precedingPhases: [ distribute-ssh-pub-key ]
                  parameters:
                      arg: "{$.slaveGeneralIps}"
                  output:
                      serialized-slaves-with-general-list: as-csv

              - serialize-slaves-with-cpu-list:
                  action: .serialize-list
                  phase: serialize-slaves-list
                  precedingPhases: [ distribute-ssh-pub-key ]
                  parameters:
                      arg: "{$.slaveCpuIps}"
                  output:
                      serialized-slaves-with-cpu-list: as-csv

              - serialize-slaves-with-memory-list:
                  action: .serialize-list
                  phase: serialize-slaves-list
                  precedingPhases: [ distribute-ssh-pub-key ]
                  parameters:
                      arg: "{$.slaveMemoryIps}"
                  output:
                      serialized-slaves-with-memory-list: as-csv

              - serialize-slaves-with-disk-list:
                  action: .serialize-list
                  phase: serialize-slaves-list
                  precedingPhases: [ distribute-ssh-pub-key ]
                  parameters:
                      arg: "{$.slaveDiskIps}"
                  output:
                      serialized-slaves-with-disk-list: as-csv

              - prepare-masters-inventory-file:
                  action: .prepare-masters-inventory-file
                  precedingPhases: [ serialize-masters-list ]
                  parameters:
                      serialized-masters-list: "{$.serialized-masters-list}"

              - prepare-slaves-inventory-file:
                  action: .prepare-slaves-inventory-file
                  precedingPhases: [ serialize-slaves-list ]
                  parameters:
                      serialized-slaves-with-general-list: "{$.serialized-slaves-with-general-list}"
                      serialized-slaves-with-cpu-list: "{$.serialized-slaves-with-cpu-list}"
                      serialized-slaves-with-memory-list: "{$.serialized-slaves-with-memory-list}"
                      serialized-slaves-with-disk-list: "{$.serialized-slaves-with-disk-list}"

              - create-vars-file:
                  action: .update-vars-file
                  precedingPhases: [ serialize-masters-list, serialize-slaves-list ]
                  parameters:
                      mesos-version: "{$.mesos_version}"
                      mesos-package-version: "{$.mesos_package_version}"
                      marathon-version: "{$.marathon_version}"
                      yaml-serialized-masters-list: "{$.yaml-serialized-masters-list}"

              - download-ansible-scripts:
                  action: .update-ansible-playbooks
                  precedingPhases: [ install-ansible ]
                  parameters:
                      playbooks-url: "{$.playbooks_url}"

              - run-ansible:
                  action: .run-ansible
                  precedingPhases: [ download-ansible-scripts, create-vars-file ]

            return:
              - Mesos_Manager:
                  value: "{$.signals.manager-node.networks.public.ip}"
              - Mesos_Masters:
                  value: "{$.masterIps}"
              - Mesos_URL:
                  value: "http://{$.masterDns[*][0]}:5050/"
              - Marathon_URL:
                  value: "http://{$.masterDns[*][0]}:8080/"
              - mesos_slaves_with_general_tag:
                  value: "{$.slaveGeneralIps}"
              - mesos_slaves_with_cpu_tag:
                  value: "{$.slaveCpuIps}"
              - mesos_slaves_with_memory_tag:
                  value: "{$.slaveMemoryIps}"
              - mesos_slaves_with_disk_tag:
                  value: "{$.slaveDiskIps}"
              - scripts_url:
                  value: "{$.playbooks_url}"
              - slaves_general_quantity:
                  value: "{$.slaves_general_hardware_quantity}"
              - slaves_cpu_quantity:
                  value: "{$.slaves_cpu_hardware_quantity}"
              - slaves_memory_quantity:
                  value: "{$.slaves_memory_hardware_quantity}"
              - slaves_disk_quantity:
                  value: "{$.slaves_disk_hardware_quantity}"

          scale-cluster:
              parameters:
                - slaves-general-hardware-quantity:
                    description: Quantity of general-purpose slaves
                    type: int
                - slaves-cpu-hardware-quantity:
                    description: Quantity of slaves with cpu tag
                    type: int
                - slaves-memory-hardware-quantity:
                    description: Quantity of slaves with memory tag
                    type: int
                - slaves-disk-hardware-quantity:
                    description: Quantity of slaves with disk tag
                    type: int
              steps:
                - provision-nodes:
                    action: .provision-slave-nodes
                    parameters:
                        slaves-general-hardware-quantity: "{$.slaves-general-hardware-quantity}"
                        slaves-cpu-hardware-quantity: "{$.slaves-cpu-hardware-quantity}"
                        slaves-memory-hardware-quantity: "{$.slaves-memory-hardware-quantity}"
                        slaves-disk-hardware-quantity: "{$.slaves-disk-hardware-quantity}"
                    output:
                        slaveGeneralIps: slaveGeneralIps
                        slaveCpuIps: slaveCpuIps
                        slaveMemoryIps: slaveMemoryIps
                        slaveDiskIps: slaveDiskIps

                - distribute-ssh-pub-key:
                    action: .distribute-ssh-pub-key
                    precedingPhases: [ provision-nodes ]

                - serialize-slaves-with-general-list:
                    action: .serialize-list
                    phase: serialize-slaves-list
                    precedingPhases: [ provision-nodes ]
                    parameters:
                        arg: "{$.slaveGeneralIps}"
                    output:
                        serialized-slaves-with-general-list: as-csv

                - serialize-slaves-with-cpu-list:
                    action: .serialize-list
                    phase: serialize-slaves-list
                    precedingPhases: [ provision-nodes ]
                    parameters:
                        arg: "${slaveCpuIps}"
                    output:
                        serialized-slaves-with-cpu-list: as-csv

                - serialize-slaves-with-memory-list:
                    action: .serialize-list
                    phase: serialize-slaves-list
                    precedingPhases: [ provision-nodes ]
                    parameters:
                        arg: "${slaveMemoryIps}"
                    output:
                        serialized-slaves-with-memory-list: as-csv

                - serialize-slaves-with-disk-list:
                    action: .serialize-list
                    phase: serialize-slaves-list
                    precedingPhases: [ provision-nodes ]
                    parameters:
                        arg: "${slaveDiskIps}"
                    output:
                        serialized-slaves-with-disk-list: as-csv

                - prepare-slaves-inventory-file:
                    action: .prepare-slaves-inventory-file
                    precedingPhases: [ serialize-slaves-list ]
                    parameters:
                        serialized-slaves-with-general-list: "{$.serialized-slaves-with-general-list}"
                        serialized-slaves-with-cpu-list: "{$.serialized-slaves-with-cpu-list}"
                        serialized-slaves-with-memory-list: "{$.serialized-slaves-with-memory-list}"
                        serialized-slaves-with-disk-list: "{$.serialized-slaves-with-disk-list}"

                - run-ansible:
                    action: .run-ansible
                    precedingPhases: [ prepare-slaves-inventory-file ]

              return:
                - mesos_slaves_with_general_tag:
                    value: "{$.slaveGeneralIps}"
                - mesos_slaves_with_cpu_tag:
                    value: "{$.slaveCpuIps}"
                - mesos_slaves_with_memory_tag:
                    value: "{$.slaveMemoryIps}"
                - mesos_slaves_with_disk_tag:
                    value: "{$.slaveDiskIps}"
                - slaves_general_quantity:
                    value: "{$.slaves-general-hardware-quantity}"
                - slaves_cpu_quantity:
                    value: "{$.slaves-cpu-hardware-quantity}"
                - slaves_memory_quantity:
                    value: "{$.slaves-memory-hardware-quantity}"
                - slaves_disk_quantity:
                    value: "{$.slaves-disk-hardware-quantity}"

          run-ansible:
              steps:
                - run:
                    action: .run-ansible

          update-playbooks:
              parameters:
                - playbooks-url:
                    description: Playbooks url
              steps:
                - update:
                    action: .update-ansible-playbooks
                    parameters:
                        playbooks-url: "{$.playbooks-url}"

          .provision-slave-nodes:
              parameters:
                - slaves-general-hardware-quantity:
                    description: Quantity of general-purpose slaves
                    type: int
                - slaves-cpu-hardware-quantity:
                    description: Quantity of slaves with cpu tag
                    type: int
                - slaves-memory-hardware-quantity:
                    description: Quantity of slaves with memory tag
                    type: int
                - slaves-disk-hardware-quantity:
                    description: Quantity of slaves with disk tag
                    type: int
              steps:
                - provision-slaves-with-general-tag:
                    action: .provision-nodes
                    parameters:
                      roleName: "mesos-general-slave"
                      hardwareId: "{$.general_tag_hardware}"
                      quantity: "{$.slaves-general-hardware-quantity}"
                    output:
                      slaveGeneralIps: ips
                      slaveGeneralDns: dns
                - provision-slaves-with-cpu-tag:
                    action: .provision-nodes
                    parameters:
                      roleName: "mesos-cpu-slave"
                      hardwareId: "{$.cpu_tag_hardware}"
                      quantity: "{$.slaves-cpu-hardware-quantity}"
                    output:
                      slaveCpuIps: ips
                      slaveCpuDns: dns
                - provision-slaves-with-memory-tag:
                    action: .provision-nodes
                    parameters:
                      roleName: "mesos-memory-slave"
                      hardwareId: "{$.memory_tag_hardware}"
                      quantity: "{$.slaves-memory-hardware-quantity}"
                    output:
                      slaveMemoryIps: ips
                      slaveMemoryDns: dns
                - provision-slaves-with-disk-tag:
                    action: .provision-nodes
                    parameters:
                      roleName: "mesos-disk-slave"
                      hardwareId: "{$.disk_tag_hardware}"
                      quantity: "{$.slaves-disk-hardware-quantity}"
                    output:
                      slaveDiskIps: ips
                      slaveDiskDns: dns
              return:
                slaveGeneralIps:
                  value: "{$.slaveGeneralIps}"
                slaveCpuIps:
                  value: "{$.slaveCpuIps}"
                slaveMemoryIps:
                  value: "{$.slaveMemoryIps}"
                slaveDiskIps:
                  value: "{$.slaveDiskIps}"

          .install-ansible:
              steps:
                - install:
                    action: execrun
                    parameters:
                        isSudo: true
                        roles: [ "manager-node" ]
                        command:
                            - |
                              apt-get install software-properties-common &&
                              apt-add-repository ppa:ansible/ansible &&
                              apt-get update &&
                              apt-get install -y ansible unzip

          .generate-ssh-key:
              steps:
                - generate:
                    action: execrun
                    parameters:
                        roles: [ "manager-node" ]
                        command:
                            - |
                              ssh-keygen -t rsa -N "" -f ~/.ssh/aws.key &&
                              chmod 600 ~/.ssh/aws.key

          .prepare-masters-inventory-file:
              parameters:
                - serialized-masters-list:
                    description: List with master ips
              steps:
                - prepare:
                    action: execrun
                    parameters:
                      roles: [ "manager-node" ]
                      command:
                          - |
                            if [[ ! -d ~/inventory ]]; then
                              mkdir ~/inventory
                            fi
                            echo "[mesos_masters]" > ~/inventory/masters &&
                            echo "{$.serialized-masters-list}" >> ~/inventory/masters &&
                            echo "[mesos_masters:vars]" >> ~/inventory/masters &&
                            echo "ansible_user=ubuntu" >> ~/inventory/masters &&
                            echo "ansible_ssh_private_key_file=~/.ssh/aws.key" >> ~/inventory/masters

          .prepare-slaves-inventory-file:
              parameters:
                - serialized-slaves-with-general-list:
                    description: List with general slave ips
                - serialized-slaves-with-cpu-list:
                    description: List with cpu slave ips
                - serialized-slaves-with-memory-list:
                    description: List with memory slave ips
                - serialized-slaves-with-disk-list:
                    description: List with disk slave ips
              steps:
                - prepare:
                    action: execrun
                    parameters:
                      roles: [ "manager-node" ]
                      command:
                          - |
                            if [[ ! -d ~/inventory ]]; then
                              mkdir ~/inventory
                            fi
                            echo "[mesos_workers:children]" > ~/inventory/slaves &&
                            echo "mesos_general_instances" >> ~/inventory/slaves &&
                            echo "mesos_cpu_instances" >> ~/inventory/slaves &&
                            echo "mesos_memory_instances" >> ~/inventory/slaves &&
                            echo "mesos_disk_instances" >> ~/inventory/slaves &&
                            echo "[mesos_general_instances]" >> ~/inventory/slaves &&
                            echo "{$.serialized-slaves-with-general-list}" >> ~/inventory/slaves &&
                            echo "[mesos_cpu_instances]" >> ~/inventory/slaves &&
                            echo "{$.serialized-slaves-with-cpu-list}" >> ~/inventory/slaves &&
                            echo "[mesos_memory_instances]" >> ~/inventory/slaves &&
                            echo "{$.serialized-slaves-with-memory-list}" >> ~/inventory/slaves &&
                            echo "[mesos_disk_instances]" >> ~/inventory/slaves &&
                            echo "{$.serialized-slaves-with-disk-list}" >> ~/inventory/slaves &&
                            echo "[mesos_workers:vars]" >> ~/inventory/slaves  &&
                            echo "ansible_user=ubuntu" >> ~/inventory/slaves &&
                            echo "ansible_ssh_private_key_file=~/.ssh/aws.key" >> ~/inventory/slaves &&
                            echo "[mesos_general_instances:vars]" >> ~/inventory/slaves &&
                            echo "mesos_node_type=general" >> ~/inventory/slaves &&
                            echo "[mesos_cpu_instances:vars]" >> ~/inventory/slaves &&
                            echo "mesos_node_type=cpu-intensive" >> ~/inventory/slaves &&
                            echo "[mesos_memory_instances:vars]" >> ~/inventory/slaves &&
                            echo "mesos_node_type=memory-intensive" >> ~/inventory/slaves &&
                            echo "[mesos_disk_instances:vars]" >> ~/inventory/slaves &&
                            echo "mesos_node_type=disk-intensive" >> ~/inventory/slaves


          .update-vars-file:
              parameters:
                - mesos-version:
                    description: Mesos version
                - mesos-package-version:
                    description: Mesos package version
                - marathon-version:
                    description: Marathon version
                - yaml-serialized-masters-list:
                    description: Yaml formated master ips
              steps:
                - create-vars-file:
                    action: execrun
                    parameters:
                        roles: [ "manager-node" ]
                        command:
                            - |
                              echo "mesos_version: \"{$.mesos-version}\"" > params.yaml &&
                              echo "mesos_package_version: \"{$.mesos-package-version}\"" >> params.yaml &&
                              echo "marathon_version: \"{$.marathon-version}\"" >> params.yaml &&
                              echo "mesos_master_hosts:" >> params.yaml &&
                              echo "{$.yaml-serialized-masters-list}" >> params.yaml

          .distribute-ssh-pub-key:
              steps:
                - get-ansible-ssh-pub-key:
                    action: execrun
                    parameters:
                      roles: [ "manager-node" ]
                      command:
                          - |
                            cat ~/.ssh/aws.key.pub
                    output:
                      ansible-pub-key: stdout
                - distribute-ssh-pub-key:
                    action: execrun
                    precedingPhases: [ get-ansible-ssh-pub-key ]
                    parameters:
                      roles: [ "mesos-master", "mesos-general-slave", "mesos-cpu-slave", "mesos-memory-slave", "mesos-disk-slave" ]
                      command:
                          - |
                            if [[ -z "`cat ~/.ssh/authorized_keys | grep "{$.ansible-pub-key[*][0]}"`" ]]; then
                              echo "{$.ansible-pub-key[*][0]}" >> ~/.ssh/authorized_keys
                            fi

          .update-ansible-playbooks:
              parameters:
                - playbooks-url:
                    description: URL to new zip file with playbooks
              steps:
                - update-playbooks:
                    action: execrun
                    parameters:
                      roles: [ "manager-node" ]
                      command:
                          - |
                            rm -rf --preserve-root playbooks.zip &&
                            wget "{$.playbooks-url}" -O playbooks.zip &&
                            folder=`echo "{$.playbooks-url}" | cut -d/ -f 5` &&
                            branch=`echo "{$.playbooks-url}" | sed -n 's/\(.*\)archive\/\(.*\).zip/\2/p'` &&
                            rm -rf --preserve-root ./ansible-playbook &&
                            rm -rf $${{folder}}-$${{branch}} &&
                            unzip playbooks.zip &&
                            mv $${{folder}}-$${{branch}}/ansible-playbook ansible-playbook &&
                            rm -rf $${{folder}}-$${{branch}}

          .run-ansible:
              steps:
                - run-ansible:
                    action: execrun
                    parameters:
                      roles: [ "manager-node" ]
                      command:
                          - |
                            cd ansible-playbook &&
                            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i ../inventory ./playbook.yml --extra-vars "@../params.yaml"

          .serialize-list:
              parameters:
                - arg:
                    description: Argument to serialize
              steps:
                - serialize-as-csv:
                    action: serialize
                    parameters:
                        format: CSV
                        input: "{$.arg}"
                    output:
                        serialized-as-csv: serialized
                - serialize-as-yaml:
                    action: serialize
                    parameters:
                        format: yaml
                        input: "{$.arg}"
                    output:
                        serialized-as-yaml: serialized
              return:
                as-csv:
                  value: "{$.serialized-as-csv}"
                as-yaml:
                  value: "{$.serialized-as-yaml}"

          .provision-nodes:
              parameters:
                - roleName:
                    description: Role for the provisioned node
                - hardwareId:
                    description: Hardware id
                - quantity:
                    description: Number of nodes to start
              steps:
                - provision-node:
                    action: provisionAmazonVm
                    phase: provision
                    parameters:
                      roleName: "{$.roleName}"
                      imageId: "{$.ami}"
                      vmIdentity: "{$.identity}"
                      hardwareId: "{$.hardwareId}"
                      targetQuantity: "{$.quantity}"
                    output:
                      PublicIPs: ips
                - set-hostname:
                    action: execrun
                    phase: post-provision
                    precedingPhases: [ provision ]
                    parameters:
                      isSudo: true
                      roles: [ "{$.roleName}" ]
                      command:
                          - |
                            hostname `curl -s http://169.254.169.254/latest/meta-data/public-hostname` &&
                            echo "`hostname -i`   `hostname`" >> /etc/hosts &&
                            hostname
                    output:
                      dns: stdout
              return:
                ips:
                  value: "{$.PublicIPs}"
                dns:
                  value: "{$.dns}"

    marathon:
      type: reference.Submodule
      configuration:
        __locator.application-id: "Mesos/Marathon Manager"
      required: [marathon-manager]

      interfaces:
        marathon-manager:
          Mesos_Manager: consume-signal(string)
          Marathon_URL: consume-signal(string)
          scripts_url: consume-signal(string)
        actions:
          list-applications:
            type: receive-command()
            name: List running applications
          application-details:
            type: receive-command(string application-id)
            name: Get running application details
          create-application:
            type: receive-command(string application-id, string serialized-descriptor)
            name: Create/run new application
          update-application:
            type: receive-command(string application-id, string serialized-descriptor)
            name: Update running application
          destroy-application:
            type: receive-command(string application-id)
            name: Delete application
          restart-application:
            type: receive-command(string application-id)
            name: Restart running application
