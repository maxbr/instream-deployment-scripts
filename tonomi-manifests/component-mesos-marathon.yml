application:
  configuration:
    input.ami: "us-west-1/ami-48db9d28"
    input.region: "us-west-1"
    input.identity: "ubuntu"
    input.master_hardware: "t2.small"
    input.manager_hardware: "t2.micro"
    input.slave_hardware: "t2.medium"
    input.masters_quantity: "1"
    input.slaves_quantity: "2"
    input.playbooks_url: "https://s3-us-west-1.amazonaws.com/streaming-artifacts/playbooks.tar.gz"
    input.mesos_version: "0.28.2"
    input.mesos_package_version: "2.0.27"
    input.marathon_version: "1.1.2"

  interfaces:
    input:
      ami: "bind(vms#input.ami, manager-node#configuration.imageId)"
      region: "bind(vms#input.region, manager-node#configuration.locationId)"
      identity: "bind(vms#input.identity, manager-node#configuration.login)"
      manager_hardware: "bind(vms#input.manager_hardware, manager-node#configuration.hardwareId)"
      master_hardware: "bind(vms#input.master_hardware)"
      slave_hardware: "bind(vms#input.slave_hardware)"
      masters_quantity: "bind(vms#input.masters_quantity)"
      slaves_quantity: "bind(vms#input.slaves_quantity)"
      playbooks_url: "bind(vms#input.playbooks_url)"
      mesos_version: "bind(vms#input.mesos_version)"
      mesos_package_version: "bind(vms#input.mesos_package_version)"
      marathon_version: "bind(vms#input.marathon_version)"

    Mesos:
      application-pic: "bind(metadata#output.mesos-pic)"
      manager: "bind(vms#result.Mesos_URL)"
      slaves: "bind(vms#result.mesos_slaves)"

    Marathon:
      application-pic: "bind(metadata#output.marathon-pic)"
      manager: "bind(vms#result.Marathon_URL)"
      list-applications: "bind(marathon#actions.list-applications)"
      application-details: "bind(marathon#actions.application-details)"
      create-application: "bind(marathon#actions.create-application)"
      update-application: "bind(marathon#actions.update-application)"
      destroy-application: "bind(marathon#actions.destroy-application)"
      restart-application: "bind(marathon#actions.restart-application)"

  bindings:
    - [manager-node, vms]
    - [vms, marathon#marathon-manager]

  components:
    metadata:
      type: cobalt.common.Constants
      interfaces:
        output:
          mesos-pic:
            type: publish-signal(map<string, object>)
            name: ""
          marathon-pic:
            type: publish-signal(map<string, object>)
            name: ""
      configuration:
        configuration.values:
          output.mesos-pic:
            large: "https://mesosphere.com/wp-content/themes/mesosphere/library/images/views/why-mesos/mesos-logo.png"
            small: "https://avatars1.githubusercontent.com/u/229272?v=3&s=64"
            small-height: 64
          output.marathon-pic:
            large: "https://camo.githubusercontent.com/074c27eb3865127b2d8bc616ae16450c0f661780/68747470733a2f2f6d65736f7370686572652e636f6d2f77702d636f6e74656e742f7468656d65732f6d65736f7370686572652f6c6962726172792f696d616765732f636f6d706f6e656e74732f73657276696365732f6d61726174686f6e2e6a7067"
            small: "http://mesosphere.github.io/presentations/mesos-nutshell-2015/assets/marathon-favicon-64x64.png"
            small-height: 64

    manager-node:
      type: compute.Instance

    vms:
      type: workflow.Instance
      interfaces:
        manager-node:
          networks:   consume-signal(map<string, map<string, string>>)
          exec:       send-command(string command, int timeout => string stdOut, string stdErr => string stdOut, string stdErr, int exitCode)
          put-file:   send-command(string filename, bytes payload)
          get-file:   send-command(string filename => bytes payload)
        input:
          ami:
            type: configuration(string)
            name: EC2 image
          region:
            type: configuration(string)
            name: EC2 datacenter
          identity:
            type: configuration(string)
            name: EC2 image username
          manager_hardware:
            type: configuration(string)
            name: Mesos cluster manager node hardware type
          master_hardware:
            type: configuration(string)
            name: Mesos master node hardware type
          slave_hardware:
            type: configuration(string)
            name: Mesos slaves hardware type
          masters_quantity:
            type: configuration(string)
            name: No. of mesos masters
          slaves_quantity:
            type: configuration(string)
            name: No. of mesos slaves

          playbooks_url:
            type: configuration(string)
            name: Ansible playbooks

          mesos_version:
            type: configuration(string)
            name: Mesos version
          marathon_version:
            type: configuration(string)
            name: Marathon version
          mesos_package_version:
            type: configuration(string)
            name: Mesos .deb package version
        result:
          Mesos_Manager:
            type: publish-signal(string)
            name: Mesos cluster manager node
          Mesos_Masters:
            type: publish-signal(list<string>)
            name: Mesos master nodes
          Mesos_URL:
            type: publish-signal(string)
            name: Mesos master UI URL
          Marathon_URL:
            type: publish-signal(string)
            name: Marathon UI URL
          mesos_slaves:
            type: publish-signal(list<string>)
            name: Mesos slaves
          scripts_url:
            type: publish-signal(string)
            name: Marathon management scripts URL

      required: [manager-node]
      configuration:
        configuration.triggers: {}
        configuration.workflows:
          launch:
            steps:
              - get_env_props:
                  action: getEnvironmentProperties
                  phase: get-env-props
                  output:
                    config: result

              - get-signals:
                  action: getSignals
                  output:
                      signals: result

              - provision-mesos-master:
                  action: .provision-node
                  phase: provision-node
                  precedingPhases: [ get-env-props ]
                  parameters:
                      roleName: "mesos-master"
                      hardwareId: "{$.master_hardware}"
                      quantity: "{$.masters_quantity}"
                  output:
                      masterIps: ips
                      masterDns: dns

              - provision-slaves:
                  action: .provision-node
                  phase: provision-node
                  precedingPhases: [ get-env-props ]
                  parameters:
                      roleName: "mesos-slave"
                      hardwareId: "{$.slave_hardware}"
                      quantity: "{$.slaves_quantity}"
                  output:
                      slaveIps: ips
                      slaveDns: dns

              - install-ansible:
                  action: execrun
                  precedingPhases: [ provision-node ]
                  parameters:
                      isSudo: true
                      roles: [ "manager-node" ]
                      command:
                          - |
                            apt-get install software-properties-common &&
                            apt-add-repository ppa:ansible/ansible &&
                            apt-get update &&
                            apt-get install -y ansible

              - generate-ansible-ssh-key:
                  action: execrun
                  precedingPhases: [ install-ansible ]
                  parameters:
                      roles: [ "manager-node" ]
                      command:
                          - |
                            ssh-keygen -t rsa -N "" -f ~/.ssh/aws.key &&
                            chmod 600 ~/.ssh/aws.key

              - get-ansible-ssh-pub-key:
                  action: execrun
                  precedingPhases: [ generate-ansible-ssh-key ]
                  parameters:
                      roles: [ "manager-node" ]
                      command:
                          - |
                            cat ~/.ssh/aws.key.pub
                  output:
                      ansible-pub-key: stdout

              - distribute-ssh-pub-key:
                  action: execrun
                  precedingPhases: [ get-ansible-ssh-pub-key ]
                  parameters:
                      roles: [ "mesos-master", "mesos-slave" ]
                      command:
                          - |
                            echo "{$.ansible-pub-key[*][0]}" >> ~/.ssh/authorized_keys

              - serialize-masters-list:
                  action: serialize
                  precedingPhases: [ distribute-ssh-pub-key ]
                  parameters:
                      format: CSV
                      input: "{$.masterIps}"
                  output:
                      serialized-masters-list: serialized

              - serialize-masters-list-as-yaml:
                  action: serialize
                  precedingPhases: [ distribute-ssh-pub-key ]
                  parameters:
                      format: yaml
                      input: "{$.masterIps}"
                  output:
                      yaml-serialized-masters-list: serialized

              - serialize-slaves-list:
                  action: serialize
                  precedingPhases: [ distribute-ssh-pub-key ]
                  parameters:
                      format: CSV
                      input: "{$.slaveIps}"
                  output:
                      serialized-slaves-list: serialized

              - create-hosts-list:
                  action: execrun
                  precedingPhases: [ serialize-masters-list, serialize-slaves-list ]
                  parameters:
                      roles: [ "manager-node" ]
                      command:
                          - |
                            echo "[mesos_masters]" > hosts &&
                            echo "{$.serialized-masters-list}" >> hosts &&
                            echo "[mesos_workers]" >> hosts &&
                            echo "{$.serialized-slaves-list}" >> hosts &&
                            echo "[mesos_masters:vars]" >> hosts &&
                            echo "ansible_user=ubuntu" >> hosts &&
                            echo "ansible_ssh_private_key_file=~/.ssh/aws.key" >> hosts &&
                            echo "[mesos_workers:vars]" >> hosts  &&
                            echo "ansible_user=ubuntu" >> hosts &&
                            echo "ansible_ssh_private_key_file=~/.ssh/aws.key" >> hosts

              - create-vars-file:
                  action: execrun
                  precedingPhases: [ serialize-masters-list, serialize-slaves-list, serialize-masters-list-as-yaml ]
                  parameters:
                      roles: [ "manager-node" ]
                      command:
                          - |
                            echo "mesos_version: \"{$.mesos_version}\"" > params.yaml &&
                            echo "mesos_package_version: \"{$.mesos_package_version}\"" >> params.yaml &&
                            echo "marathon_version: \"{$.marathon_version}\"" >> params.yaml &&
                            echo "mesos_master_hosts:" >> params.yaml &&
                            echo "{$.yaml-serialized-masters-list}" >> params.yaml

              - download-ansible-scripts:
                  action: execrun
                  precedingPhases: [ create-hosts-list ]
                  parameters:
                      roles: [ "manager-node" ]
                      command:
                          - |
                            wget "{$.playbooks_url}" -O playbooks.tar.gz &&
                            tar -zxf playbooks.tar.gz

              - run-ansible:
                  action: execrun
                  precedingPhases: [ download-ansible-scripts, create-vars-file ]
                  parameters:
                      roles: [ "manager-node" ]
                      command:
                          - |
                            cd mesos-ansible &&
                            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i ../hosts playbook.yml --extra-vars "@../params.yaml"
            return:
              - Mesos_Manager:
                  value: "{$.signals.manager-node.networks.public.ip}"
              - Mesos_Masters:
                  value: "{$.masterIps}"
              - Mesos_URL:
                  value: "http://{$.masterDns[*][0]}:5050/"
              - Marathon_URL:
                  value: "http://{$.masterDns[*][0]}:8080/"
              - mesos_slaves:
                  value: "{$.slaveIps}"
              - scripts_url:
                  value: "{$.playbooks_url}"

          .provision-node:
              parameters:
                - roleName:
                    description: Role for the provisioned node
                - hardwareId:
                    description: Hardware id
                - quantity:
                    description: Number of nodes to start
              steps:
                - provision-node:
                    action: provisionAmazonVm
                    phase: provision
                    parameters:
                      roleName: "{$.roleName}"
                      imageId: "{$.ami}"
                      vmIdentity: "{$.identity}"
                      hardwareId: "{$.hardwareId}"
                      quantity: "{$.quantity}"
                    output:
                      PublicIPs: ips

                - set-hostname:
                    action: execrun
                    phase: post-provision
                    precedingPhases: [ provision ]
                    parameters:
                      isSudo: true
                      roles: [ "{$.roleName}" ]
                      command:
                          - |
                            hostname `curl -s http://169.254.169.254/latest/meta-data/public-hostname` &&
                            echo "`hostname -i`   `hostname`" >> /etc/hosts &&
                            hostname
                    output:
                      dns: stdout
              return:
                ips:
                  value: "{$.PublicIPs}"
                dns:
                  value: "{$.dns}"

    marathon:
      type: reference.Submodule
      configuration:
        __locator.application-id: "Mesos/Marathon Manager"
      required: [marathon-manager]

      interfaces:
        marathon-manager:
          Mesos_Manager: consume-signal(string)
          Marathon_URL: consume-signal(string)
          scripts_url: consume-signal(string)
        actions:
          list-applications:
            type: receive-command()
            name: List running applications
          application-details:
            type: receive-command(string application-id)
            name: Get running application details
          create-application:
            type: receive-command(string application-id, string serialized-descriptor)
            name: Create/run new application
          update-application:
            type: receive-command(string application-id, string serialized-descriptor)
            name: Update running application
          destroy-application:
            type: receive-command(string application-id)
            name: Delete application
          restart-application:
            type: receive-command(string application-id)
            name: Restart running application
